#!/usr/bin/env zsh

set -e

if [[ $(git -C $DOTFILES diff --shortstat 2> /dev/null | tail -n1) != "" ]]
then
    echo "\033[1;31m──›\033[0m dotfiles are dirty, skipping"
else
    echo "\033[00;32m──›\033[0m updating dotfiles"
    if test "$(git -C $DOTFILES pull)" != "Already up to date."
    then
        exit
    fi
fi

if test "$(uname)" = "Linux"
then
  if test "$(whence apt-get 2> /dev/null)"
  then
    echo "\033[00;32m──›\033[0m updating apt-get"
    sudo apt-get update
    set +e
    sudo apt-get dist-upgrade
    sudo apt-get autoremove
    set -e
    sudo apt-get clean
    echo
  elif test "$(whence dnf 2> /dev/null)"
  then
    echo "\033[00;32m──›\033[0m updating dnf"
    sudo dnf clean all
    set +e
    sudo dnf update
    sudo dnf autoremove
    set -e
    sudo dnf clean all
    echo
  elif test "$(whence trizen 2> /dev/null)"
  then
    echo "\033[00;32m──›\033[0m updating aur"
    trizen -Syu
    set +e
    trizen -Rns $(trizen -Qtdq)
    set -e
    echo
  elif test "$(whence pacman 2> /dev/null)"
  then
    echo "\033[00;32m──›\033[0m updating pacman"
    sudo pacman -Syu
    set +e
    sudo pacman -Rns $(pacman -Qtdq)
    set -e
    echo
  fi
fi

if test "$(whence brew 2> /dev/null)"
then
  echo "\033[00;32m──›\033[0m updating brew"
  brew bundle cleanup --file=$DOTFILES/homebrew/Brewfile
  brew update
  brew upgrade
  brew cleanup --force
  brew prune
  brew cask cleanup
  echo
fi

if test "$(whence pip 2> /dev/null)"
then
  echo "\033[00;32m──›\033[0m updating pip2"
  pip install --user --upgrade -r $DOTFILES/pip/requirements.txt
  echo
fi

if test "$(whence pip3 2> /dev/null)"
then
  echo "\033[00;32m──›\033[0m updating pip3"
  pip3 install --user --upgrade -r $DOTFILES/pip/requirements.txt
  echo
fi

if test "$(whence fzf 2> /dev/null)"
then
  echo "\033[00;32m──›\033[0m updating fzf"
  if test "$(git -C ~/.fzf pull)" != "Already up-to-date."
  then
    ~/.fzf/install --all --no-update-rc
  fi
  echo
fi

if test "$(whence apm 2> /dev/null)"
then
  echo "\033[00;32m──›\033[0m updating apm"
  apm upgrade -c false
  echo
fi

if test -d ~/.tmux/plugins/tpm
then
  echo "\033[00;32m──›\033[0m updating tpm"
  git -C ~/.tmux/plugins/tpm pull
  # tries to delete everything when TMUX_PLUGIN_MANAGER_PATH is unset https://github.com/tmux-plugins/tpm/issues/58
  #~/.tmux/plugins/tpm/bin/clean_plugins
  ~/.tmux/plugins/tpm/bin/update_plugins all
  echo
fi

if test "$(whence vim 2> /dev/null)"
then
  if test -f ~/.vim/autoload/plug.vim
  then
   echo "\033[00;32m──›\033[0m updating vim-plug"
   vim +PlugUpdate +PlugUpgrade +qall
   echo
  fi
fi

if test "$(whence nvim 2> /dev/null)"
then
  if test -f ~/.local/share/nvim/site/autoload/plug.vim
  then 
   echo "\033[00;32m──›\033[0m updating neovim-plug"
   nvim +PlugUpdate +PlugUpgrade +qall
   echo
  fi
fi

if which antibody >/dev/null 2>&1; then
  echo "\033[00;32m──›\033[0m updating antibody"
  antibody update
  echo
fi

if test "$(uname)" = "Darwin"
then
  echo "\033[00;32m──›\033[0m OS X Software Update"
  softwareupdate -l	
fi
